//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 18 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `Nunito-Black.ttf`.
    static let nunitoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Black", pathExtension: "ttf")
    /// Resource file `Nunito-BlackItalic.ttf`.
    static let nunitoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-BlackItalic", pathExtension: "ttf")
    /// Resource file `Nunito-Bold.ttf`.
    static let nunitoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Bold", pathExtension: "ttf")
    /// Resource file `Nunito-BoldItalic.ttf`.
    static let nunitoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-BoldItalic", pathExtension: "ttf")
    /// Resource file `Nunito-ExtraBold.ttf`.
    static let nunitoExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-ExtraBold", pathExtension: "ttf")
    /// Resource file `Nunito-ExtraBoldItalic.ttf`.
    static let nunitoExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Nunito-ExtraLight.ttf`.
    static let nunitoExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-ExtraLight", pathExtension: "ttf")
    /// Resource file `Nunito-ExtraLightItalic.ttf`.
    static let nunitoExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Nunito-Italic.ttf`.
    static let nunitoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Italic", pathExtension: "ttf")
    /// Resource file `Nunito-Light.ttf`.
    static let nunitoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Light", pathExtension: "ttf")
    /// Resource file `Nunito-LightItalic.ttf`.
    static let nunitoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-LightItalic", pathExtension: "ttf")
    /// Resource file `Nunito-Regular.ttf`.
    static let nunitoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Regular", pathExtension: "ttf")
    /// Resource file `Nunito-SemiBold.ttf`.
    static let nunitoSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-SemiBold", pathExtension: "ttf")
    /// Resource file `Nunito-SemiBoldItalic.ttf`.
    static let nunitoSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `OFL.txt`.
    static let oflTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "OFL", pathExtension: "txt")
    /// Resource file `private.pem`.
    static let privatePem = Rswift.FileResource(bundle: R.hostingBundle, name: "private", pathExtension: "pem")
    /// Resource file `public.pem`.
    static let publicPem = Rswift.FileResource(bundle: R.hostingBundle, name: "public", pathExtension: "pem")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Black", withExtension: "ttf")`
    static func nunitoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-BlackItalic", withExtension: "ttf")`
    static func nunitoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Bold", withExtension: "ttf")`
    static func nunitoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-BoldItalic", withExtension: "ttf")`
    static func nunitoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-ExtraBold", withExtension: "ttf")`
    static func nunitoExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-ExtraBoldItalic", withExtension: "ttf")`
    static func nunitoExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-ExtraLight", withExtension: "ttf")`
    static func nunitoExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-ExtraLightItalic", withExtension: "ttf")`
    static func nunitoExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Italic", withExtension: "ttf")`
    static func nunitoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Light", withExtension: "ttf")`
    static func nunitoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-LightItalic", withExtension: "ttf")`
    static func nunitoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Regular", withExtension: "ttf")`
    static func nunitoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-SemiBold", withExtension: "ttf")`
    static func nunitoSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-SemiBoldItalic", withExtension: "ttf")`
    static func nunitoSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OFL", withExtension: "txt")`
    static func oflTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oflTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "private", withExtension: "pem")`
    static func privatePem(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privatePem
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "public", withExtension: "pem")`
    static func publicPem(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.publicPem
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 14 fonts.
  struct font: Rswift.Validatable {
    /// Font `Nunito-BlackItalic`.
    static let nunitoBlackItalic = Rswift.FontResource(fontName: "Nunito-BlackItalic")
    /// Font `Nunito-Black`.
    static let nunitoBlack = Rswift.FontResource(fontName: "Nunito-Black")
    /// Font `Nunito-BoldItalic`.
    static let nunitoBoldItalic = Rswift.FontResource(fontName: "Nunito-BoldItalic")
    /// Font `Nunito-Bold`.
    static let nunitoBold = Rswift.FontResource(fontName: "Nunito-Bold")
    /// Font `Nunito-ExtraBoldItalic`.
    static let nunitoExtraBoldItalic = Rswift.FontResource(fontName: "Nunito-ExtraBoldItalic")
    /// Font `Nunito-ExtraBold`.
    static let nunitoExtraBold = Rswift.FontResource(fontName: "Nunito-ExtraBold")
    /// Font `Nunito-ExtraLightItalic`.
    static let nunitoExtraLightItalic = Rswift.FontResource(fontName: "Nunito-ExtraLightItalic")
    /// Font `Nunito-ExtraLight`.
    static let nunitoExtraLight = Rswift.FontResource(fontName: "Nunito-ExtraLight")
    /// Font `Nunito-Italic`.
    static let nunitoItalic = Rswift.FontResource(fontName: "Nunito-Italic")
    /// Font `Nunito-LightItalic`.
    static let nunitoLightItalic = Rswift.FontResource(fontName: "Nunito-LightItalic")
    /// Font `Nunito-Light`.
    static let nunitoLight = Rswift.FontResource(fontName: "Nunito-Light")
    /// Font `Nunito-Regular`.
    static let nunitoRegular = Rswift.FontResource(fontName: "Nunito-Regular")
    /// Font `Nunito-SemiBoldItalic`.
    static let nunitoSemiBoldItalic = Rswift.FontResource(fontName: "Nunito-SemiBoldItalic")
    /// Font `Nunito-SemiBold`.
    static let nunitoSemiBold = Rswift.FontResource(fontName: "Nunito-SemiBold")

    /// `UIFont(name: "Nunito-Black", size: ...)`
    static func nunitoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBlack, size: size)
    }

    /// `UIFont(name: "Nunito-BlackItalic", size: ...)`
    static func nunitoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBlackItalic, size: size)
    }

    /// `UIFont(name: "Nunito-Bold", size: ...)`
    static func nunitoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBold, size: size)
    }

    /// `UIFont(name: "Nunito-BoldItalic", size: ...)`
    static func nunitoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBoldItalic, size: size)
    }

    /// `UIFont(name: "Nunito-ExtraBold", size: ...)`
    static func nunitoExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoExtraBold, size: size)
    }

    /// `UIFont(name: "Nunito-ExtraBoldItalic", size: ...)`
    static func nunitoExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Nunito-ExtraLight", size: ...)`
    static func nunitoExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoExtraLight, size: size)
    }

    /// `UIFont(name: "Nunito-ExtraLightItalic", size: ...)`
    static func nunitoExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Nunito-Italic", size: ...)`
    static func nunitoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoItalic, size: size)
    }

    /// `UIFont(name: "Nunito-Light", size: ...)`
    static func nunitoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoLight, size: size)
    }

    /// `UIFont(name: "Nunito-LightItalic", size: ...)`
    static func nunitoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoLightItalic, size: size)
    }

    /// `UIFont(name: "Nunito-Regular", size: ...)`
    static func nunitoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoRegular, size: size)
    }

    /// `UIFont(name: "Nunito-SemiBold", size: ...)`
    static func nunitoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoSemiBold, size: size)
    }

    /// `UIFont(name: "Nunito-SemiBoldItalic", size: ...)`
    static func nunitoSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoSemiBoldItalic, size: size)
    }

    static func validate() throws {
      if R.font.nunitoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Black' could not be loaded, is 'Nunito-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-BlackItalic' could not be loaded, is 'Nunito-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Bold' could not be loaded, is 'Nunito-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-BoldItalic' could not be loaded, is 'Nunito-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-ExtraBold' could not be loaded, is 'Nunito-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-ExtraBoldItalic' could not be loaded, is 'Nunito-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-ExtraLight' could not be loaded, is 'Nunito-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-ExtraLightItalic' could not be loaded, is 'Nunito-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Italic' could not be loaded, is 'Nunito-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Light' could not be loaded, is 'Nunito-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-LightItalic' could not be loaded, is 'Nunito-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Regular' could not be loaded, is 'Nunito-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-SemiBold' could not be loaded, is 'Nunito-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-SemiBoldItalic' could not be loaded, is 'Nunito-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 94 images.
  struct image {
    /// Image `1.0 Splash_Screen`.
    static let splash_Screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "1.0 Splash_Screen")
    /// Image `2.0 Dashboard Load`.
    static let dashboardLoad = Rswift.ImageResource(bundle: R.hostingBundle, name: "2.0 Dashboard Load")
    /// Image `Aadhaarxml`.
    static let aadhaarxml = Rswift.ImageResource(bundle: R.hostingBundle, name: "Aadhaarxml")
    /// Image `Bank Group `.
    static let bankGroup = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bank Group ")
    /// Image `Biometric`.
    static let biometric = Rswift.ImageResource(bundle: R.hostingBundle, name: "Biometric")
    /// Image `Bitmap`.
    static let bitmap = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bitmap")
    /// Image `Cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cart")
    /// Image `CloseImg`.
    static let closeImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "CloseImg")
    /// Image `Create Account Form`.
    static let createAccountForm = Rswift.ImageResource(bundle: R.hostingBundle, name: "Create Account Form")
    /// Image `Delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete")
    /// Image `DownArrow`.
    static let downArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "DownArrow")
    /// Image `Ellipse`.
    static let ellipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse")
    /// Image `Empty Copy 6`.
    static let emptyCopy6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty Copy 6")
    /// Image `Empty Copy 7`.
    static let emptyCopy7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty Copy 7")
    /// Image `Forgot User ID`.
    static let forgotUserID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forgot User ID")
    /// Image `GoogleBg`.
    static let googleBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoogleBg")
    /// Image `Group 1057`.
    static let group1057 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1057")
    /// Image `Group 1088`.
    static let group1088 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1088")
    /// Image `Group 1128`.
    static let group1128 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1128")
    /// Image `Group 1129`.
    static let group1129 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1129")
    /// Image `Group 1130`.
    static let group1130 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1130")
    /// Image `Group 1134`.
    static let group1134 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1134")
    /// Image `Group 1318`.
    static let group1318 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1318")
    /// Image `Group 1368`.
    static let group1368 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1368")
    /// Image `Group 1527`.
    static let group1527 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1527")
    /// Image `Group 315`.
    static let group315 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 315")
    /// Image `Group 317`.
    static let group317 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 317")
    /// Image `Group 342`.
    static let group342 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 342")
    /// Image `Group 344`.
    static let group344 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 344")
    /// Image `Group 345`.
    static let group345 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 345")
    /// Image `Group 352`.
    static let group352 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 352")
    /// Image `Group 354`.
    static let group354 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 354")
    /// Image `Group 507`.
    static let group507 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 507")
    /// Image `Group 552`.
    static let group552 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 552")
    /// Image `Group 5`.
    static let group5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 5")
    /// Image `Group 80 1`.
    static let group801 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 80 1")
    /// Image `Group 829`.
    static let group829 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 829")
    /// Image `Group 830`.
    static let group830 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 830")
    /// Image `Group 9-1`.
    static let group91 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 9-1")
    /// Image `Group 9`.
    static let group9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 9")
    /// Image `Group`.
    static let group = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group")
    /// Image `KycChk`.
    static let kycChk = Rswift.ImageResource(bundle: R.hostingBundle, name: "KycChk")
    /// Image `Layer 1`.
    static let layer1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 1")
    /// Image `Menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu")
    /// Image `MobiWithHand`.
    static let mobiWithHand = Rswift.ImageResource(bundle: R.hostingBundle, name: "MobiWithHand")
    /// Image `Notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notification")
    /// Image `OTM`.
    static let otM = Rswift.ImageResource(bundle: R.hostingBundle, name: "OTM")
    /// Image `Oval`.
    static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Oval")
    /// Image `Path 4`.
    static let path4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path 4")
    /// Image `Path 6`.
    static let path6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path 6")
    /// Image `PatterImage`.
    static let patterImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "PatterImage")
    /// Image `Processing`.
    static let processing = Rswift.ImageResource(bundle: R.hostingBundle, name: "Processing")
    /// Image `QRScan`.
    static let qrScan = Rswift.ImageResource(bundle: R.hostingBundle, name: "QRScan")
    /// Image `Rectangle`.
    static let rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle")
    /// Image `Shape`.
    static let shape = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shape")
    /// Image `Sidemenu`.
    static let sidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sidemenu")
    /// Image `Signup`.
    static let signup = Rswift.ImageResource(bundle: R.hostingBundle, name: "Signup")
    /// Image `Splash-Screen-1`.
    static let splashScreen1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash-Screen-1")
    /// Image `SucessInvest`.
    static let sucessInvest = Rswift.ImageResource(bundle: R.hostingBundle, name: "SucessInvest")
    /// Image `TickMark`.
    static let tickMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "TickMark")
    /// Image `UserHolder`.
    static let userHolder = Rswift.ImageResource(bundle: R.hostingBundle, name: "UserHolder")
    /// Image `UserImg`.
    static let userImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "UserImg")
    /// Image `Vector-1`.
    static let vector1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-1")
    /// Image `Vector-2`.
    static let vector2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-2")
    /// Image `Vector`.
    static let vector = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector")
    /// Image `Videokyc`.
    static let videokyc = Rswift.ImageResource(bundle: R.hostingBundle, name: "Videokyc")
    /// Image `Yellow`.
    static let yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Yellow")
    /// Image `alert-circle`.
    static let alertCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert-circle")
    /// Image `apple`.
    static let apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `bell`.
    static let bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell")
    /// Image `card`.
    static let card = Rswift.ImageResource(bundle: R.hostingBundle, name: "card")
    /// Image `checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked")
    /// Image `chevron left`.
    static let chevronLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron left")
    /// Image `failure`.
    static let failure = Rswift.ImageResource(bundle: R.hostingBundle, name: "failure")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `health-check`.
    static let healthCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "health-check")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `idea`.
    static let idea = Rswift.ImageResource(bundle: R.hostingBundle, name: "idea")
    /// Image `image 1`.
    static let image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image 1")
    /// Image `info (1)`.
    static let info1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "info (1)")
    /// Image `invest`.
    static let invest = Rswift.ImageResource(bundle: R.hostingBundle, name: "invest")
    /// Image `portfolio`.
    static let portfolio = Rswift.ImageResource(bundle: R.hostingBundle, name: "portfolio")
    /// Image `profile-1`.
    static let profile1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-1")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `scan`.
    static let scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan")
    /// Image `selectionRadio`.
    static let selectionRadio = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectionRadio")
    /// Image `service`.
    static let service = Rswift.ImageResource(bundle: R.hostingBundle, name: "service")
    /// Image `slideImage`.
    static let slideImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "slideImage")
    /// Image `table`.
    static let table = Rswift.ImageResource(bundle: R.hostingBundle, name: "table")
    /// Image `track`.
    static let track = Rswift.ImageResource(bundle: R.hostingBundle, name: "track")
    /// Image `undraw_Directions_re_kjxs 1`.
    static let undraw_Directions_re_kjxs1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "undraw_Directions_re_kjxs 1")
    /// Image `undraw_going_up_ttm5 1`.
    static let undraw_going_up_ttm51 = Rswift.ImageResource(bundle: R.hostingBundle, name: "undraw_going_up_ttm5 1")
    /// Image `undraw_target_kriv 1`.
    static let undraw_target_kriv1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "undraw_target_kriv 1")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "1.0 Splash_Screen", bundle: ..., traitCollection: ...)`
    static func splash_Screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_Screen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "2.0 Dashboard Load", bundle: ..., traitCollection: ...)`
    static func dashboardLoad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dashboardLoad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Aadhaarxml", bundle: ..., traitCollection: ...)`
    static func aadhaarxml(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aadhaarxml, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bank Group ", bundle: ..., traitCollection: ...)`
    static func bankGroup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bankGroup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Biometric", bundle: ..., traitCollection: ...)`
    static func biometric(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.biometric, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bitmap", bundle: ..., traitCollection: ...)`
    static func bitmap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bitmap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CloseImg", bundle: ..., traitCollection: ...)`
    static func closeImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Create Account Form", bundle: ..., traitCollection: ...)`
    static func createAccountForm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.createAccountForm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DownArrow", bundle: ..., traitCollection: ...)`
    static func downArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse", bundle: ..., traitCollection: ...)`
    static func ellipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Empty Copy 6", bundle: ..., traitCollection: ...)`
    static func emptyCopy6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyCopy6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Empty Copy 7", bundle: ..., traitCollection: ...)`
    static func emptyCopy7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyCopy7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Forgot User ID", bundle: ..., traitCollection: ...)`
    static func forgotUserID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forgotUserID, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GoogleBg", bundle: ..., traitCollection: ...)`
    static func googleBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1057", bundle: ..., traitCollection: ...)`
    static func group1057(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1057, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1088", bundle: ..., traitCollection: ...)`
    static func group1088(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1088, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1128", bundle: ..., traitCollection: ...)`
    static func group1128(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1128, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1129", bundle: ..., traitCollection: ...)`
    static func group1129(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1129, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1130", bundle: ..., traitCollection: ...)`
    static func group1130(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1130, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1134", bundle: ..., traitCollection: ...)`
    static func group1134(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1134, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1318", bundle: ..., traitCollection: ...)`
    static func group1318(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1318, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1368", bundle: ..., traitCollection: ...)`
    static func group1368(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1368, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1527", bundle: ..., traitCollection: ...)`
    static func group1527(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1527, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 315", bundle: ..., traitCollection: ...)`
    static func group315(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group315, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 317", bundle: ..., traitCollection: ...)`
    static func group317(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group317, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 342", bundle: ..., traitCollection: ...)`
    static func group342(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group342, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 344", bundle: ..., traitCollection: ...)`
    static func group344(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group344, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 345", bundle: ..., traitCollection: ...)`
    static func group345(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group345, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 352", bundle: ..., traitCollection: ...)`
    static func group352(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group352, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 354", bundle: ..., traitCollection: ...)`
    static func group354(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group354, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 5", bundle: ..., traitCollection: ...)`
    static func group5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 507", bundle: ..., traitCollection: ...)`
    static func group507(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group507, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 552", bundle: ..., traitCollection: ...)`
    static func group552(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group552, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 80 1", bundle: ..., traitCollection: ...)`
    static func group801(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group801, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 829", bundle: ..., traitCollection: ...)`
    static func group829(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group829, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 830", bundle: ..., traitCollection: ...)`
    static func group830(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group830, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 9", bundle: ..., traitCollection: ...)`
    static func group9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 9-1", bundle: ..., traitCollection: ...)`
    static func group91(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group91, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group", bundle: ..., traitCollection: ...)`
    static func group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KycChk", bundle: ..., traitCollection: ...)`
    static func kycChk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kycChk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 1", bundle: ..., traitCollection: ...)`
    static func layer1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MobiWithHand", bundle: ..., traitCollection: ...)`
    static func mobiWithHand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mobiWithHand, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OTM", bundle: ..., traitCollection: ...)`
    static func otM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.otM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Oval", bundle: ..., traitCollection: ...)`
    static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oval, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Path 4", bundle: ..., traitCollection: ...)`
    static func path4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Path 6", bundle: ..., traitCollection: ...)`
    static func path6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PatterImage", bundle: ..., traitCollection: ...)`
    static func patterImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.patterImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Processing", bundle: ..., traitCollection: ...)`
    static func processing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.processing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "QRScan", bundle: ..., traitCollection: ...)`
    static func qrScan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrScan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle", bundle: ..., traitCollection: ...)`
    static func rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shape", bundle: ..., traitCollection: ...)`
    static func shape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Sidemenu", bundle: ..., traitCollection: ...)`
    static func sidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Signup", bundle: ..., traitCollection: ...)`
    static func signup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Splash-Screen-1", bundle: ..., traitCollection: ...)`
    static func splashScreen1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreen1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SucessInvest", bundle: ..., traitCollection: ...)`
    static func sucessInvest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sucessInvest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TickMark", bundle: ..., traitCollection: ...)`
    static func tickMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UserHolder", bundle: ..., traitCollection: ...)`
    static func userHolder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userHolder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UserImg", bundle: ..., traitCollection: ...)`
    static func userImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector", bundle: ..., traitCollection: ...)`
    static func vector(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-1", bundle: ..., traitCollection: ...)`
    static func vector1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-2", bundle: ..., traitCollection: ...)`
    static func vector2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Videokyc", bundle: ..., traitCollection: ...)`
    static func videokyc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videokyc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Yellow", bundle: ..., traitCollection: ...)`
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert-circle", bundle: ..., traitCollection: ...)`
    static func alertCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple", bundle: ..., traitCollection: ...)`
    static func apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell", bundle: ..., traitCollection: ...)`
    static func bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card", bundle: ..., traitCollection: ...)`
    static func card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron left", bundle: ..., traitCollection: ...)`
    static func chevronLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "failure", bundle: ..., traitCollection: ...)`
    static func failure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.failure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "health-check", bundle: ..., traitCollection: ...)`
    static func healthCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.healthCheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "idea", bundle: ..., traitCollection: ...)`
    static func idea(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.idea, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image 1", bundle: ..., traitCollection: ...)`
    static func image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info (1)", bundle: ..., traitCollection: ...)`
    static func info1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invest", bundle: ..., traitCollection: ...)`
    static func invest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "portfolio", bundle: ..., traitCollection: ...)`
    static func portfolio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portfolio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-1", bundle: ..., traitCollection: ...)`
    static func profile1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan", bundle: ..., traitCollection: ...)`
    static func scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectionRadio", bundle: ..., traitCollection: ...)`
    static func selectionRadio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectionRadio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service", bundle: ..., traitCollection: ...)`
    static func service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.service, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slideImage", bundle: ..., traitCollection: ...)`
    static func slideImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slideImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table", bundle: ..., traitCollection: ...)`
    static func table(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "track", bundle: ..., traitCollection: ...)`
    static func track(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.track, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "undraw_Directions_re_kjxs 1", bundle: ..., traitCollection: ...)`
    static func undraw_Directions_re_kjxs1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.undraw_Directions_re_kjxs1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "undraw_going_up_ttm5 1", bundle: ..., traitCollection: ...)`
    static func undraw_going_up_ttm51(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.undraw_going_up_ttm51, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "undraw_target_kriv 1", bundle: ..., traitCollection: ...)`
    static func undraw_target_kriv1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.undraw_target_kriv1, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `Toast`.
    static let toast = _R.nib._Toast()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Toast", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toast) instead")
    static func toast(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toast)
    }
    #endif

    static func toast(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Toast? {
      return R.nib.toast.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Toast
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
    static func validate() throws {
    }
    
    #if os(iOS) || os(tvOS)
    struct nib {
        struct _Toast: Rswift.NibResourceType {
          let bundle = R.hostingBundle
          let name = "Toast"

          func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Toast? {
            return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Toast
          }

          fileprivate init() {}
        }
        fileprivate init() {}
    }
    #endif
}


    

